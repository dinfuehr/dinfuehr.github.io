<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Dominik&#39;s Blog</title>
    <link>https://dinfuehr.github.io/blog/</link>
    <description>Recent content in Blogs on Dominik&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Jan 2018 20:33:37 +0200</lastBuildDate>
    
	<atom:link href="https://dinfuehr.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A first look into ZGC</title>
      <link>https://dinfuehr.github.io/blog/a-first-look-into-zgc/</link>
      <pubDate>Wed, 03 Jan 2018 20:33:37 +0200</pubDate>
      
      <guid>https://dinfuehr.github.io/blog/a-first-look-into-zgc/</guid>
      <description>ZGC is a new garbage collector recently open-sourced by Oracle for the OpenJDK mainly written by Per Liden. ZGC is similar to Shenandoah or Azul&amp;rsquo;s C4 that focus on reducing pause-times while still compacting the heap. Although I won&amp;rsquo;t give a full introduction here, &amp;ldquo;compacting the heap&amp;rdquo; just means moving the still-alive objects to the start (or some other region) of the heap. This helps to reduce fragmentation but usually this also means that the whole application (that means all of its threads) needs to be halted while the GC does its magic, this is usually referred to as stopping the world.</description>
    </item>
    
    <item>
      <title>Dora: Implementing a JIT-compiler with Rust</title>
      <link>https://dinfuehr.github.io/blog/dora-implementing-a-jit-compiler-with-rust/</link>
      <pubDate>Tue, 12 Sep 2017 08:34:34 +0100</pubDate>
      
      <guid>https://dinfuehr.github.io/blog/dora-implementing-a-jit-compiler-with-rust/</guid>
      <description>I am writing Dora, a simple JIT-compiler with Rust. Dora is both the name of the custom programming language and of the JIT-compiler. After some time working on it, I want to write about the experiences I made. I started this project to get a better understanding of the low-level implementation details of a JIT-Compiler.
Architecture The architecture is pretty simple: dora hello.dora parses the given input file into an Abstract Syntax Tree (AST).</description>
    </item>
    
    <item>
      <title>Encoding of immediate values on AArch64</title>
      <link>https://dinfuehr.github.io/blog/encoding-of-immediate-values-on-aarch64/</link>
      <pubDate>Thu, 20 Apr 2017 20:33:37 +0200</pubDate>
      
      <guid>https://dinfuehr.github.io/blog/encoding-of-immediate-values-on-aarch64/</guid>
      <description>AArch64 is an ISA with a fixed instruction width of 32-bit. This obviously means there is not enough space to store a 64-bit immediate in a single instruction. Before working with AArch64 I was only familiar with x86 where this is a bit easier since instructions can have variable-width. A 64-bit immediate on x86-64 is really just the sequence of bytes:
mov rax, 0x1122334455667788 # encoded as: 0x48, 0xB8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11  A fixed-width ISA like ARM has to treat immediates differently.</description>
    </item>
    
  </channel>
</rss>