<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Dominik&#39;s Blog</title>
    <link>https://dinfuehr.github.io/blog/</link>
    <description>Recent content in Blogs on Dominik&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Nov 2018 22:36:24 +0200</lastBuildDate>
    <atom:link href="https://dinfuehr.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Stack Unwinding in JavaScriptCore</title>
      <link>https://dinfuehr.github.io/blog/stack-unwinding-in-javascriptcore/</link>
      <pubDate>Thu, 15 Nov 2018 22:36:24 +0200</pubDate>
      <guid>https://dinfuehr.github.io/blog/stack-unwinding-in-javascriptcore/</guid>
      <description>&lt;p&gt;JavaScriptCore (JSC, &lt;a href=&#34;https://webkit.org/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebKit&lt;/a&gt;&amp;rsquo;s JavaScript engine) needs to be able to parse/unwind the call stack for exception handling or determining stack traces.&#xA;This is not so simple since JS and native/C++ can be arbitrarily intertwined and JS call frames do not match the system&amp;rsquo;s calling convention.&#xA;On the other hand while JSC controls JS stack frames and knows how to unwind them, it can&amp;rsquo;t do the same thing for native C++ stack frames since this is defined by the compiler (its flags) and/or system.&#xA;This document describes how JSC still manages to unwind the stack.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A first look into ZGC</title>
      <link>https://dinfuehr.github.io/blog/a-first-look-into-zgc/</link>
      <pubDate>Wed, 03 Jan 2018 20:33:37 +0200</pubDate>
      <guid>https://dinfuehr.github.io/blog/a-first-look-into-zgc/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://cr.openjdk.java.net/~pliden/zgc/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ZGC&lt;/a&gt; is a new garbage collector recently open-sourced by Oracle for the OpenJDK.&#xA;It was mainly written by &lt;a href=&#34;https://twitter.com/perliden&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Per Liden&lt;/a&gt;.&#xA;ZGC is similar to &lt;a href=&#34;https://wiki.openjdk.java.net/display/shenandoah/Main&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shenandoah&lt;/a&gt; or Azul&amp;rsquo;s C4 that focus on reducing pause-times while still &lt;a href=&#34;https://en.wikipedia.org/wiki/Mark-compact_algorithm&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;compacting&lt;/a&gt; the heap.&#xA;Although I won&amp;rsquo;t give a full introduction here, &amp;ldquo;compacting the heap&amp;rdquo; just means moving the still-alive objects to the start (or some other region) of the heap.&#xA;This helps to reduce fragmentation but usually this also means that the whole application (that includes all of its threads) needs to be halted while the GC does its magic, this is usually referred to as &lt;em&gt;stopping the world&lt;/em&gt;.&#xA;Only when the GC is finished, the application can be resumed.&#xA;In GC literature the application is often called &lt;em&gt;mutator&lt;/em&gt;, since from the GC&amp;rsquo;s point of view the application mutates the heap.&#xA;Depending on the size of the heap such a pause could take several seconds, which could be quite problematic for interactive applications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dora: Implementing a JIT-compiler with Rust</title>
      <link>https://dinfuehr.github.io/blog/dora-implementing-a-jit-compiler-with-rust/</link>
      <pubDate>Tue, 12 Sep 2017 08:34:34 +0100</pubDate>
      <guid>https://dinfuehr.github.io/blog/dora-implementing-a-jit-compiler-with-rust/</guid>
      <description>&lt;p&gt;I am writing &lt;a href=&#34;https://github.com/dinfuehr/dora&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dora&lt;/a&gt;, a simple &lt;a href=&#34;https://en.wikipedia.org/wiki/Just-in-time_compilation&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JIT-compiler&lt;/a&gt; with Rust.&#xA;Dora is both the name of the custom programming language and of the JIT-compiler.&#xA;After some time working on it, I want to write about the experiences I made.&#xA;I started this project to get a better understanding of the low-level implementation details of a JIT-Compiler.&lt;/p&gt;&#xA;&lt;h3 id=&#34;architecture&#34;&gt;&#xA;  Architecture&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#architecture&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;The architecture is pretty simple: &lt;code&gt;dora hello.dora&lt;/code&gt; parses the given input file into an &lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_syntax_tree&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Abstract Syntax Tree (AST)&lt;/a&gt;. After parsing, the whole AST is semantically checked, if this succeeds execution starts with the &lt;code&gt;main&lt;/code&gt; function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Encoding of immediate values on AArch64</title>
      <link>https://dinfuehr.github.io/blog/encoding-of-immediate-values-on-aarch64/</link>
      <pubDate>Thu, 20 Apr 2017 20:33:37 +0200</pubDate>
      <guid>https://dinfuehr.github.io/blog/encoding-of-immediate-values-on-aarch64/</guid>
      <description>&lt;p&gt;AArch64 is an ISA with a fixed instruction width of 32-bit.&#xA;This obviously means there is not enough space to store a 64-bit immediate in a single instruction.&#xA;Before working with AArch64 I was only familiar with x86 where this is a bit easier since instructions can have variable-width.&#xA;A 64-bit immediate on x86-64 is really just the sequence of bytes:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mov rax, 0x1122334455667788&#xA;# encoded as: 0x48, 0xB8, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A fixed-width ISA like ARM has to treat immediates differently.&#xA;Assigning the same value to the register &lt;code&gt;x0&lt;/code&gt; takes four instructions:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
